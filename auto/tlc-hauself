#!/bin/bash
#
# An automation script for TLC, e.g., to run TLC in an AWS instance.
#
# Igor Konnov <igor@interchain.io>, 2019

set -e

CONFIG_FILE="$HOME/.tlc-hauself.rc"

function config_help() {
    echo "Config file $CONFIG_FILE not found."
    echo "Create one and set your settings:"
    echo ""
    echo "MEM_GB=<gigabytes of memory to use>"
    echo "NCORES=<CPU cores to use>"
    exit 1
}

# Parsing the config file. (Can we improve that?)
if [ ! -f "$CONFIG_FILE" ]; then
    config_help
else
    source "$CONFIG_FILE"
    case "$MEM_GB" in
        ''|*[!0-9]*) config_help ;;
        *) # OK
    esac
    case "$NCORES" in
        ''|*[!0-9]*) config_help ;;
        *) # OK
    esac
    if [ ! "$MEM_GB" -ge 1 -o ! "$NCORES" -ge 1 ]; then
        config_help
    fi
fi

if [ "$#" -ne 2 ]; then
    echo "Use: $0 <spec>.tla <spec>.cfg"
    echo ""
    echo "  <spec>.cfg is usually MC.cfg that is generated by TLA+ Toolbox"
    exit 2
fi

CONFIG="$1"
SPEC="$2"
OUT_FILE=`basename "$CONFIG" '.cfg'`.out

##############################################################################

JVM_ARGS="-XX:+UseParallelGC -Xmx${MEM_GB}g" # use MEM_GB of memory
TLC_ARGS="-workers $NCORES" # use one worker per core

# Markus recommends to use OffHeapDiskFPSet for distributed mode
# Alternatives are: MSBDiskFPSet, LSBDiskFPSet
TLC_MAGIC="-Dtlc2.tool.fp.FPSet.impl=tlc2.tool.fp.OffHeapDiskFPSet"
TLC="java $JVM_ARGS $TLC_MAGIC -cp ./tla2tools.jar tlc2.TLC"

# OS tuning parameters for (distributed) TLC that one can see in cloudTLC
# Disable hugepage defragmentation (especially important on highmem instances)
#sudo echo never >/sys/kernel/mm/transparent_hugepage/defrag
# Turn off NUMA balancing
#sudo echo 0 > /proc/sys/kernel/numa_balancing

wget -nc https://github.com/tlaplus/tlaplus/releases/download/v1.6.0/tla2tools.jar

$TLC $TLC_ARGS -config "$CONFIG" "$SPEC" | tee "$OUT_FILE"

